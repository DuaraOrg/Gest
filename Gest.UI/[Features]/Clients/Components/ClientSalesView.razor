@using Gest.UI._Features_.Sales.Components
<div class="flex items-center overflow-x-scroll space-x-3 h-full no-scrollbar">
     <div class="pt-1" >
       <h2 class="text-sm text-gray-600">Paiement</h2>
       <RadzenDropDown @bind-Value=@_selectedPaymentState  Change=@(args => OnPaymentStateChanged(args.ToString())) TValue=string Data=@PaymentStatus.AllWithTous()/>
    </div>
</div>
<RadzenDataList class=" -mx-5 -px-4 -py-4 -space-y-5" Count=@_count Data=@_items TItem=@Sale LoadData=@LoadData AllowPaging=true>
     <Template Context="item">
          <SaleCard  Click=@(_ => OnSelectItem(item)) Model=@item IsSelected=@(_selectedItem == item) />
     </Template>
</RadzenDataList>
@code 
{
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public DialogService DialogService { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;
    int _count;
    int _skip = 0;
    int _take = 5;
    bool _isBusy = true;
    Sale? _selectedItem;
    string _selectedPaymentState = PaymentStatus.Tous;
    IEnumerable<Sale> _items = new List<Sale>();

    [EditorRequired]
    [Parameter]
    public Client Model { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await InitialLoad();
        await InvokeAsync(() => StateHasChanged());
    }

    async Task OnPaymentStateChanged(string state)
    {
        _selectedPaymentState = state;
        await InitialLoad();
    }

    async Task InitialLoad()
    {
        _skip = 0;
        _take = 5;
        await LoadData(new LoadDataArgs() { Skip = _skip, Top = _take });
    }
    async Task LoadData(LoadDataArgs args)
    {
        _isBusy = true;
        var query = DbContext.Sales
                   .Include(x => x.Client)
                  .Include(x => x.Items).ThenInclude(x => x.Article)
                  .Where(x => _selectedPaymentState == PaymentStatus.Tous || x.PayStatus == _selectedPaymentState)
                  .Where(x => x.ClientId == Model.Id)
                  .Where(x => x.CompanyId == CurrentItems.Company.Id)
                  .AsNoTracking();
        _items = await query
                   .OrderByDescending(x => x.UpdatedAt)
                  .Paginate(args.Skip,args.Top).ToListAsync();
        _count = await query
                .CountAsync();
        _isBusy = false;
    }

    async Task OnSelectItem(Sale value)
    {
        await ViewDetails(value);
    }
    async Task ViewDetails(Sale item)
    {
        var param = new Dictionary<string, object?>() { { "Model", item } };
        var title = $"Vente No #{item.SaleId}";
        var result = await DialogService.OpenAsync<SaleView>(title, param);
        if (result is bool canRefresh && canRefresh == true)
            await InitialLoad();
    }
}