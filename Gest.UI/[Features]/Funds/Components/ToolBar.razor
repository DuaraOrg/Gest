<div class="shadow flex items-center overflow-x-scroll space-x-3 px-2  py-1 h-full no-scrollbar">
    <div>
       <h2 class="text-sm text-gray-600">Rechercher</h2>
       <RadzenTextBox  @oninput=@(args => OnSearchQuery.InvokeAsync(args.Value?.ToString())) class="min-w-[10rem]" Placeholder="Noms du client" />
    </div>
    <div class="pt-1" >
       <h2 class="text-sm text-gray-600">Catégorie</h2>
       <RadzenDropDown @bind-Value=@_selectedCategorie TValue=string Change=@(args => OnCategorySelected.InvokeAsync(args.ToString())) Data=@_categories/>
    </div>
     <div class="pt-1" >
       <h2 class="text-sm text-gray-600">Type</h2>
       <RadzenDropDown @bind-Value=@_selectedTransactionType TValue=string Change=@(args => OnTransTypeSelected.InvokeAsync(args.ToString())) Data=@TransactionType.AllWithTous()/>
    </div>
    <div>
       <h2 class="text-sm text-gray-600">Période</h2>
       <RadzenDropDown @bind-Value=@_selectedPeriod Change=@(e => PeriodChanged.InvokeAsync(e.ToString())) Data=@Period.AllWithTous()/>
    </div>
    <div class="flex items-center space-x-4">
    @if(_selectedPeriod == Period.Date || _selectedPeriod == Period.IntervalDate)
    {
       <div>
        <h2 class="text-sm text-gray-600">@(_selectedPeriod == Period.Date ? "Date" : "Date de début")</h2>
        <RadzenDatePicker class="w-[7rem]" @bind-Value=@_startDate Change=@OnDateChanged DateFormat="d"/>
       </div>
    }
    @if(_selectedPeriod == Period.IntervalDate)
    {
      <h2 class="text-gray-600">-</h2>
      <div>
          <h2 class="text-sm text-gray-600">Date de fin</h2>
          <RadzenDatePicker class="w-[7rem]" @bind-Value=@_endDate Change=@OnDateChanged DateFormat="d"/>
      </div>
    }
    </div>
     <div class="pt-4 flex space-x-2">
        <RadzenButton Click=@(_ => NewItem.InvokeAsync()) MouseEnter=@(args => ShowTooltip(args,"Ajouter une dépense"))  Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
        <RadzenButton Click=@(_ => OnRefresh.InvokeAsync()) Icon="refresh" ButtonStyle="ButtonStyle.Light" />
    </div>
</div>


@code {
    string _searchQuery = string.Empty;
    string _selectedTransactionType = TransactionType.Tous;
    string _selectedCategorie = "Tous";
    IEnumerable<string?> _categories = new List<string?>();
    [Inject] public GestDbContext DbContext { get; set; } = null!;

    string _selectedPeriod = Period.Tous;

    DateTime _startDate = DateTime.UtcNow.ToLocalTime();
    DateTime _endDate = DateTime.UtcNow.ToLocalTime();

    [Parameter]
    public EventCallback<string> PeriodChanged { get; set; }

    [Parameter]
    public EventCallback<(DateTime startDate,DateTime endDate)> DateChanged { get; set; }

    void OnDateChanged()
    {
        DateChanged.InvokeAsync((_startDate, _endDate));
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Policy.Handle<InvalidOperationException>()
              .WaitAndRetryAsync(5, attempt => TimeSpan.FromMilliseconds(100 * attempt))
              .ExecuteAsync(LoadCategories);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    async Task LoadCategories()
    {
        var categories = await DbContext.Payments.Select(x => x.Category)
                  .Distinct().ToListAsync();
         if (!categories.Any(x => x == "Tous"))
            categories.Insert(0, "Tous");
        _categories = categories!;
        _categories = categories ?? new List<string?>();
    }

    [Parameter]
    public EventCallback<string> OnSearchQuery { get; set; }

    [Parameter]
    public EventCallback<string> OnCategorySelected { get; set; }

    [Parameter]
    public EventCallback<string> OnTransTypeSelected { get; set; }

    [Parameter]
    public EventCallback OnRefresh { get; set; } 

    [Parameter]
    public EventCallback NewItem { get; set; } 

    [Inject] TooltipService TooltipService { get; set; } = null!;
    void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null!)
      => TooltipService.Open(elementReference, message, options);
}
