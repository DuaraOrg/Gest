@if(Model is not null)
{
    <div class="w-full bg-gray-50 shadow p-4">
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Noms de l'utilisateur'</h2>
            <h2 class="text-gray-800 font-medium">@Model.FullName</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Role</h2>
            <h2 class="text-gray-800 font-medium">@Model.Role</h2>
        </div>
        <div class="grid grid-cols-3 px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600 col-span-1">Permission</h2>
            <div  class="text-gray-800 text-sm col-span-2 flex flex-col items-end">
                @foreach(var item in @Model.Permissions.Split(";"))
                {
                    <div class="flex space-x-1">
                       <h1 class=" font-semibold">@item.Split(":").First()</h1>
                       <p>:</p>
                        <h1 class="text-gray-600">@item.Split(":").Last()</h1>
                    </div>
                }
            </div>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Numéro de téléphone </h2>
            <h2 class="text-gray-800 font-medium">@Model.PhoneNumber</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Email</h2>
            <h2 class="text-gray-800 font-medium rounded">@Model.Email</h2>
        </div>
  </div>
  <div class="pt-4 space-y-1 px-2">
    <p class="text-gray-600">Actions</p>
    <div>
        <button @onclick=@(_ => EditItem(Model)) class="bg-gray-600 hover:bg-gray-500 px-4 py-2 text-gray-50 rounded shadow">Modifier</button>
    </div>
  </div>
}
<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>
@code {
    bool _isSmall = false;

    [Inject] public DialogService DialogService { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public User? Model { get; set; }

    [Parameter]
    public EventCallback OnModifyClick { get; set; }

    async Task EditItem(User? item = null)
    {
        if(_isSmall)
        {
            var itemModel = item?.Adapt<UserModel>() ?? new UserModel();
            itemModel.User = item;
            var param = item is null ? new Dictionary<string, object?>()
               : new Dictionary<string, object?>() { { "Model", itemModel } };
            var title = item is null ? "Ajouter un utilisateur" : $"Utilisateur {itemModel.FullName}";
            var result = await DialogService.OpenAsync<UserEdit>(title, param);
        }
        else
        {
            await OnModifyClick.InvokeAsync();
        }
    }
}
