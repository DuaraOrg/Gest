@if (_permissions is { Length: > 0 })
{
        <div class="space-y-1">
        <ToolBar  OnRefresh=@(_ => InitialLoad()) OnCategorySelected=@(e => OnSelectCategorie(e))
        OnStateSelected=@(e => OnStateFilter(e)) OnSearchQuery=@(e => OnSearch(e)) Permissions=@_permissions />
        @if (_isBusy)
        {
                <RadzenProgressBar  class="w-full h-1"  Value="100" ShowValue=@false Mode=@ProgressBarMode.Indeterminate/>
        }
        <div class="grid md:grid-cols-5 gap-2 pt-[5.5rem] md:pt-24 h-full md:h-[70vh] pb-8">
            <RadzenDataList class="col-span-2 -space-y-5" Count=@_count Data=@_items TItem=@Article LoadData=@LoadData AllowPaging=true>
                <Template Context="item">
                     <label for="@($"modal-article-{item.Id}")" >
                           <ArticleCard Click=@(e => OnSelectItem(item)) ShowBtnText=@(_permissions.Contains(AppPermissions.Update)) BtnActionClick=@(_ => NewStock(item))  Model=@item IsSelected=@(_selectedItem == item) BtnActionText="Ajouter au stock"/>
                     </label>
                     <label id="@($"btn-modal-new-stock-{item.Id}")" for="@($"modal-new-stock-{item.Id}")" class="hidden"></label>
                     <AddToStockModal Article=@item Permissions=@_permissions Refresh="_ => InitialLoad()"/>
                    @if (_isSmall)
                    {
                        <ArticleViewModal Model=@item Permissions=@_permissions Refresh="_ => InitialLoad()"/>
                    }
                </Template>
            </RadzenDataList>
            @if (_selectedItem is not null)
            {
                     <div class="hidden md:block col-span-3 ">
                        <ArticleView Permissions=@_permissions Refresh="_ => InitialLoad()" Model=@_selectedItem/>
                     </div>
            }
        </div>
    </div>
    @if(_permissions.Contains(AppPermissions.Create) || _permissions.Contains(AppPermissions.Update))
    {
        <div class="tooltip" data-tip="Ajouter un article">
             <label for="modal-new-article"  class="btn btn-square fixed bottom-9 left-4 shadow-md">
                 <svg class=" fill-current"  viewBox="0 0 50 50">
                      <path d="M24 9L24 24L9 24L9 26L24 26L24 41L26 41L26 26L41 26L41 24L26 24L26 9Z" />
                 </svg>
             </label>
        </div>
        <ArticleEditModal Permissions=@_permissions Refresh=@(() => InitialLoad())/>
    }
}
<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>

@code {
    [Inject] public DialogService DialogService { get; set; } = null!;
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = null!;
    bool _isSmall = false;
    bool _isBusy = false;
    string _searchQuery = string.Empty;
    string _selectedFilterState = StockFilter.Tous;
    string _selectedCategorie = "Tous";
    string _permissions = string.Empty;
    Article? _selectedItem;
    int _count;
    int _skip = 0;
    int _take = 10;
    IEnumerable<Article> _items = new List<Article>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _permissions = CurrentItems.User.GetPermissionsFor(AppSections.Stock);
            await Policy.Handle<InvalidOperationException>()
             .WaitAndRetryAsync(3, attempt => TimeSpan.FromMilliseconds(100 * attempt))
             .ExecuteAsync(InitialLoad);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    async Task InitialLoad()
    {
        _skip = 0;
        _take = 10;
        await LoadData(new LoadDataArgs() { Skip = _skip, Top = _take });
        _selectedItem = _items.FirstOrDefault();
    }

    async Task OnSearch(string value)
    {
        _searchQuery = value;
        await InitialLoad();
    }

    async Task OnStateFilter(string value)
    {
        _selectedFilterState = value;
        await InitialLoad();
    }

    async Task OnSelectCategorie(string value)
    {
        _selectedCategorie = value;
        await InitialLoad();
    }

    void OnSelectItem(Article value)
    {
        _selectedItem = value;
    }

    async Task LoadData(LoadDataArgs args)
    {
        if (_isBusy)
            return;
        _isBusy = true;
        var query = DbContext.Articles
                 .Where(x => _selectedCategorie == "Tous" || x.Category == _selectedCategorie)
                 .Where(x => x.CompanyId == CurrentItems.Company.Id)
                 .AsNoTracking();
        var queryWithFilterState = _selectedFilterState switch
        {
            StockFilter.OutOfStock => query.Where(x => x.Stock.Qty <= x.Stock.Minimum),
            StockFilter.InExcess => query.Where(x => x.Stock.Qty >= x.Stock.Maximum),
            _ => query
        };

        if (!string.IsNullOrEmpty(_searchQuery))
        {
            _items = await queryWithFilterState
                .Where(x => x.Name.Contains(_searchQuery))
                .OrderByDescending(x => x.CreatedAt)
                .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await queryWithFilterState
               .Where(x => x.Name.Contains(_searchQuery))
               .CountAsync();
        }
        else
        {
            _items = await queryWithFilterState
                 .OrderByDescending(x => x.CreatedAt)
                 .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await queryWithFilterState
               .CountAsync();
        }
        _isBusy = false;
    }

    async Task NewStock(Article item)
    {
       await JSRuntime.InvokeVoidAsync("click", $"btn-modal-new-stock-{item.Id}");
    }
}
