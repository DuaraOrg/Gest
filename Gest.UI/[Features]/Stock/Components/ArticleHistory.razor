<div>
   <div class="flex space-x-2  overflow-x-scroll no-scrollbar shadow px-2 py-1 -mx-4">
       <div >
            <h2 class="text-sm text-gray-600">Type</h2>
            <RadzenDropDown @bind-Value=@_selectedState  TValue=string Change=@(args => OnStateChange(args.ToString())) Data=@StockState.AllWithTous()/>
        </div>
        <div>
            <h2 class="text-sm text-gray-600">Période</h2>
            <RadzenDropDown @bind-Value=@_selectedPeriod Change=@(args => OnPeriodChange(args.ToString()))  Data=@Period.AllWithTous()/>
        </div>
    <div class="flex items-center space-x-4">
    @if(_selectedPeriod == Period.Date || _selectedPeriod == Period.IntervalDate)
    {
       <div>
        <h2 class="text-sm text-gray-600">@(_selectedPeriod == Period.Date ? "Date" : "Date de début")</h2>
        <RadzenDatePicker class="w-[7rem]" Change=@(args => OnPeriodChange(_selectedPeriod)) @bind-Value=@_startDate DateFormat="d"/>
       </div>
    }
    @if(_selectedPeriod == Period.IntervalDate)
    {
      <h2 class="text-gray-600">-</h2>
      <div>
       <h2 class="text-sm text-gray-600">Date de fin</h2>
       <RadzenDatePicker class="w-[7rem]" Change=@(args => OnPeriodChange(_selectedPeriod)) @bind-Value=@_endDate DateFormat="d"/>
    </div>
    }
   </div>
    <div class="pt-5">
        <RadzenButton Click=@(_ => LoadData(new LoadDataArgs() { Skip = 0, Top = 2 })) Icon="refresh" ButtonStyle="ButtonStyle.Light" />
    </div>
   </div>
   <RadzenDataList PageSize=2  Count=@_count Data=@_items TItem=@StockMouvement LoadData=@LoadData AllowPaging=true>
    <Template Context="item">
        <div class="space-y-3">
            <div class="flex justify-between">
                <div class="flex space-x-2">
                    <h2 class="text-sm font-light">Type:</h2>
                    <h2 class="text-sm font-medium">@GetType(item)</h2>
                </div>
                <div class="flex space-x-2">
                    <h2 class="text-sm font-light">Date:</h2>
                    <h2 class="text-sm font-medium">@item.Date.ToLocalTime().ToLongDateString()</h2>
                </div>
            </div>
            <div class="flex justify-between">
                <div class="space-y-1">
                    <h2 class="text-sm font-light">Nouvelle Qté:</h2>
                    <h2 class="text-sm font-medium">@item.Qty @item.Article!.UnitOfMeasure</h2>
                </div>
                <div class="space-y-1">
                    <h2 class="text-sm font-light">Nouveau Stock:</h2>
                    <h2 class="text-sm font-medium">@item.NewStock @item.Article!.UnitOfMeasure</h2>
                </div>
                 <div class="space-y-1">
                    <h2 class="text-sm font-light">Ancien Stock:</h2>
                    <h2 class="text-sm font-medium">@item.PrevStock @item.Article!.UnitOfMeasure</h2>
                </div>
            </div>
            <div class="flex justify-between">
                <div class="space-y-1">
                    <h2 class="text-sm font-light">Prix de vente par @item.Article.UnitOfMeasure:</h2>
                    <h2 class="text-sm font-medium">@item.NewSellingPrice $</h2>
                </div>
                 <div class="space-y-1">
                    <h2 class="text-sm font-light">Prix d'achat par @item.Article!.UnitOfMeasure:</h2>
                    <h2 class="text-sm font-medium">@item.NewBuyingPrice $</h2>
                </div>
            </div>

        </div>
    </Template>
</RadzenDataList>
</div>

@code {
    bool _isBusy =true;
    int _count = 0;
    string _selectedState = StockState.Tous;
    string _selectedPeriod = Period.Tous;
    DateTime _startDate = DateTime.UtcNow.ToLocalTime();
    DateTime _endDate = DateTime.UtcNow.ToLocalTime();
    [Inject] GestDbContext DbContext { get; set; } = null!;
    [EditorRequired]
    [Parameter] 
    public Article Model { get; set; } = null!;

    IEnumerable<StockMouvement> _items = new List<StockMouvement>();

    protected async override Task OnParametersSetAsync()
    {
        await Policy.Handle<InvalidOperationException>()
             .WaitAndRetryAsync(3, attempt => TimeSpan.FromMilliseconds(100 * attempt))
             .ExecuteAsync(() => LoadData(new LoadDataArgs() { Skip = 0, Top = 2 }));
        StateHasChanged();
    }

    async Task OnStateChange(string? value)
    {
        _selectedState = value ?? StockState.Tous;
        await LoadData(new LoadDataArgs() { Skip = 0, Top = 2 });
    }

    async Task OnPeriodChange(string? value)
    {
        _selectedPeriod = value ?? Period.Tous;
        await LoadData(new LoadDataArgs() { Skip = 0, Top = 2 });
    }

    string GetType(StockMouvement stockMouvement)
    => stockMouvement.State switch
    {
        StockState.In => "Entré ou Arrivage",
        StockState.Out => "Sortie",
        _ => "Endommager"
    };

    async Task LoadData(LoadDataArgs args)
    {
         _isBusy = true;
            var itemsStockMvmts = DbContext.StockMouvements
                    .Include(x => x.Article)
                    .AsNoTracking()
                    .Where(x => _selectedState == StockState.Tous || x.State == _selectedState)
                    .Where(x => x.ArticleId == Model.Id)
                    .OrderByDescending(x => x.Date);
            var itemsWithPeriod = _selectedPeriod switch
            {
                Period.Today => itemsStockMvmts.Where(x => x.Date.Date == DateTime.UtcNow.Date),
                Period.ThisWeek => itemsStockMvmts.Where(x => x.Date.Month == DateTime.UtcNow.Month),
                Period.ThisMonth => itemsStockMvmts.Where(x => x.Date.Month == DateTime.UtcNow.Month),
                Period.Date => itemsStockMvmts.Where(x => x.Date.Date == _startDate.Date),
                Period.IntervalDate => itemsStockMvmts.Where(x => x.Date >= _startDate && x.Date <= _endDate),
                _ => itemsStockMvmts
            };
            _items = await itemsWithPeriod
                    .Paginate(args.Skip,args.Top).ToListAsync();
            _count = await DbContext.StockMouvements
                    .Where(x => _selectedState == StockState.Tous || x.State == _selectedState)
                    .OrderByDescending(x => x.Date)
                    .CountAsync();
            _isBusy = false;
    }

}
