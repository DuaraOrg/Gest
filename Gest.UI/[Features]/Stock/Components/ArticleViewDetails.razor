<div>
<div class="shadow bg-base-100 text-base-content">
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Nom de l'article</h2>
        <h2 class=" font-medium">@Model.Name</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Catégorie</h2>
        <h2 class=" font-medium">@Model.Category</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Unité de mesure</h2>
        <h2 class=" font-medium">@Model.UnitOfMeasure</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Qté en stock</h2>
        <h2 class=" font-medium rounded">@Model.Stock.Qty @Model.UnitOfMeasure</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Prix de vente par unité de mesure</h2>
        <h2 class=" font-medium rounded">@Model.Price.SellingPricePerUnitOfMeasure $ par @Model.UnitOfMeasure</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Prix d'achat par unité de mesure</h2>
        <h2 class=" font-medium rounded">@Model.Price.BuyingPricePerUnitOfMeasure $ par @Model.UnitOfMeasure</h2>
    </div>
    <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Stock Minimum</h2>
        <h2 class=" font-medium rounded">@Model.Stock.Minimum @Model.UnitOfMeasure</h2>
    </div>
     <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
        <h2 class="font-light ">Stock Maximum</h2>
        <h2 class=" font-medium rounded">@Model.Stock.Maximum @Model.UnitOfMeasure</h2>
    </div>
    @if(Model.Conditionnement is not null)
    {
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light ">Conditionnement</h2>
            <h2 class=" font-medium">@Model.Conditionnement.Name</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light ">Qté par conditionnement</h2>
            <h2 class=" font-medium">@Model.Conditionnement.QtyPerUnitOfMeasure @Model.UnitOfMeasure par @Model.Conditionnement.Name</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light ">Prix de vente par conditionnement</h2>
            <h2 class=" font-medium">@Model.Price.SellingPricePerConditionnement $ par @Model.Conditionnement.Name</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light ">Prix d'achat par conditionnement</h2>
            <h2 class=" font-medium">@Model.Price.BuyingPricePerConditionnement $ par @Model.Conditionnement.Name</h2>
        </div>
    }
</div>
<div class="pt-4 space-y-1">
    <p class="">Actions</p>
    <div>
        <label for="@($"modal-edit-article-{Model.Id}")"  class="btn">Modifier</label>
        <ArticleEditModal Model=@Model Permissions=@Permissions Refresh=@(_ => Refresh.InvokeAsync())/>
        <label id="@($"btn-close-modal-article-{Model.Id}")" for="@($"modal-article-{Model.Id}")" class="btn btn-outline shadow md:hidden">Fermer</label>
    </div>
</div>
</div>

@code {

     [Inject] public IJSRuntime JSRuntime { get; set; } = null!;

    [EditorRequired]
    [Parameter] 
    public Article Model { get; set; } = null!;

    [Parameter] public EventCallback Refresh { get; set; }
    [EditorRequired]
    [Parameter]
    public string Permissions { get; set; } = null!;

    async Task OnRefresh()
    {
        await Refresh.InvokeAsync();
        await JSRuntime.InvokeVoidAsync("click", $"btn-close-modal-article-{Model.Id}");
    }
}
