<div>
    <EditForm class="space-y-2" Model=@Model OnValidSubmit=@Save>
       <DataAnnotationsValidator/>
       <ValidationSummary/>
       <span class="grid md:grid-cols-3"/>@*For tailwind css*@
       <div class="grid md:@(Model.Category == "Autres" ? "grid-cols-3" : "grid-cols-2") gap-2">
           <RadzenTextBox class="w-full" @bind-Value=@Model.Name Placeholder="Nom de l'article"/>
           <RadzenDropDown class="w-full" Data=@_categories @bind-Value=@Model.Category  Placeholder="Catégorie" />
            @if(Model.Category == "Autres")
            {
                 <RadzenTextBox class="w-full" @bind-Value=@Model.Category  Placeholder="Catégorie"/>
            }
       </div>
       <div class="grid md:grid-cols-2 gap-2">
           <RadzenTextBox class="w-full" @bind-Value=@Model.UnitOfMeasure Placeholder="Unité de mesure"/>
           <RadzenNumeric class="w-full" @bind-Value=@Model.StockQty Min=0 Format=@($"#.##  {Model.UnitOfMeasure}") Placeholder=@($"Qté en stock en {Model.UnitOfMeasure ??  "unité de mesure"}")/>
       </div>
        <div class="grid md:grid-cols-2 gap-2">
           <RadzenTextBox class="w-full" @bind-Value=@Model.ConditionementName Placeholder="Conditionement"/>
           <RadzenNumeric class="w-full" @bind-Value=@Model.ConditionnementQtyPerUnitOfMeasure Min=0 Format=@($"#.##  {Model.UnitOfMeasure} par {Model.ConditionementName}") Placeholder=@($"Qté en {Model.UnitOfMeasure  ??  "unité de mesure"} par {Model.ConditionementName ?? "conditionnement"}")/>
       </div>
        <div class="grid md:grid-cols-2 gap-2">
           <RadzenNumeric class="w-full" @bind-Value=@Model.SellingPricePerUnitOfMeasure Min=0 Format=@($"#.## $ par {Model.UnitOfMeasure}") Placeholder=@($"Prix de vente par {Model.UnitOfMeasure ??  "unité de mesure"}")/>
           <RadzenNumeric class="w-full" @bind-Value=@Model.SellingPricePerConditionnement Min=0 Format=@($"#.## $ par {Model.ConditionementName}") Placeholder=@($"Prix de vente par {Model.ConditionementName ?? "conditionnement"}")/>
       </div>
        <div class="grid md:grid-cols-2 gap-2">
           <RadzenNumeric class="w-full" @bind-Value=@Model.BuyingPricePerUnitOfMeasure Min=0 Format=@($"#.## $ par {Model.UnitOfMeasure}") Placeholder=@($"Prix d'achat par {Model.UnitOfMeasure ??  "unité de mesure"}")/>
           <RadzenNumeric class="w-full" @bind-Value=@Model.BuyingPricePerConditionnement Min=0 Format=@($"#.## $ par {Model.ConditionementName}") Placeholder=@($"Prix d'achat par {Model.ConditionementName ?? "conditionnement"}")/>
       </div>
        <div class="grid md:grid-cols-2 gap-2">
           <RadzenNumeric class="w-full" @bind-Value=@Model.StockMinimum Min=1 Format=@($"#.## {Model.UnitOfMeasure}") Placeholder=@($"Stock Minimum en {Model.UnitOfMeasure ??  "unité de mesure"}") />
           <RadzenNumeric class="w-full" @bind-Value=@Model.StockMaximum Min=2 Format=@($"#.## {Model.UnitOfMeasure}") Placeholder=@($"Stock Maximum en {Model.UnitOfMeasure ?? "unité de mesure"}") />
       </div>
        <div class="py-2">
            <RadzenButton class="m-1 px-2" type="submit" IsBusy=@_isBusy Icon="save" Text="Enregistrer" ButtonStyle="ButtonStyle.Secondary" />
            @if (_isNew)
            {
                 <RadzenButton class="m-1 px-2" Click=@(_ => Cancel(false)) Icon="close" Text="Annuler" ButtonStyle="ButtonStyle.Light" />
            }
            else
            {
                 <RadzenButton class="m-1 px-2" Click=@ConfirmDelete Icon="delete" Text="Supprimer" ButtonStyle="ButtonStyle.Danger" />
            }
        </div>
   </EditForm>
</div>
@code {
    bool _isBusy = false;
    bool _isNew = true;
    IEnumerable<string> _categories = new List<string>();
    [Inject] public DialogService DialogService { get; set; } = null!;
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;

    [Parameter] public ArticleModel Model { get; set; } = new ArticleModel();

    protected override void OnParametersSet()
    {
        _isNew = Model.Id is null;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var categories = await DbContext.Articles.Select(x => x.Category)
                    .Distinct().ToListAsync();
            if (!categories.Any(x => x == "Autres"))
                categories.Add("Autres");
            _categories = categories;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    async Task Save()
    {
        _isBusy = true;
        var item = Model.Adapt<Article>();
        item.CompanyId = CurrentItems.Company!.Id;
        item.BranchId = CurrentItems.Branch!.Id;
        if (_isNew)
        {
            item.CreatedAt = DateTime.UtcNow;
            await DbContext.Articles.AddAsync(item);
        }
        else
        {
            item.UpdatedAt = DateTime.UtcNow;
            DbContext.Update(item);
        }
        var result = await DbContext.SaveChangesAsync();
        if (result > 0)
            Cancel(true);
        _isBusy = false;
    }

    void Cancel(bool canRefresh = false) => DialogService.Close(canRefresh);

    async Task Delete()
    {
        if (_isNew)
            return;
        _isBusy = true;
        var item = DbContext.Articles.First(x => x.Id == Model.Id);
        DbContext.Articles.Remove(item);
        await DbContext.SaveChangesAsync();
        Cancel(true);
        _isBusy = false;
    }
    async Task ConfirmDelete()
    {
        var result = await DialogService
        .Confirm("Etes-vous sûre?", $"Supprimer {Model.Name}", new ConfirmOptions() { OkButtonText = "Oui", CancelButtonText = "Non" });
        if (result.Value == true)
            await Delete();
    }
}
