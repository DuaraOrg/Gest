@using Gest.UI._Features_.Clients.Components
<div class="bg-base-200 h-full px-2 py-1 space-y-1">
     <div class="flex space-x-2  w-full py-2">
      <input type="text" 
             @oninput=@(args => OnSearch(args.Value?.ToString() ?? string.Empty))
             placeholder="Rechercher un article par nom" 
             class="input input-bordered w-full min-w-[7rem]" />
       <div class="flex space-x-1">
            @if (_permissions.Contains(AppPermissions.Create))
            {
                                         <div class="tooltip" data-tip="Ajouter un client">
                                                 <label for="modal-new-client"  class="btn btn-square text-base-content shadow-md">
                                                   <svg class="h-6 fill-current"  viewBox="0 0 50 50">
                                                        <path d="M24 9L24 24L9 24L9 26L24 26L24 41L26 41L26 26L41 26L41 24L26 24L26 9Z" />
                                                    </svg>
                                                </label>
                                           </div>
            }
         <button  class="btn btn-outline btn-square text-base-content shadow-md" @onclick=@InitialLoad>
             <svg class="h-6 fill-current"  viewBox="0 0 30 30">
                 <path d="M15 3C12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312C10.25407 5.9000929 12.516602 5 15 5C20.19656 5 24.450989 8.9379267 24.951172 14L22 14L26 20L30 14L26.949219 14C26.437925 7.8516588 21.277839 3 15 3 z M 4 10L0 16L3.0507812 16C3.562075 22.148341 8.7221607 27 15 27C17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469C19.74593 24.099907 17.483398 25 15 25C9.80344 25 5.5490109 21.062074 5.0488281 16L8 16L4 10 z" />
             </svg>
         </button>
       </div>
    </div>
     <div class="bg-base-100 h-[1px] w-full"></div>
    @if (_isBusy)
    {
            <progress class="progress w-full"></progress>
    }
    <div>
        <RadzenDataList class="col-span-2 -space-y-5 min-h-[15rem]" Count=@_count Data=@_items TItem=@Client LoadData=@LoadData AllowPaging=true>
            <Template Context="item">
                <div class="-m-4 -mx-5">
                   <ClientCard Overflow=@false Model=@item Click=@(_ => _selectedItem = item) IsSelected=@(_selectedItem == item) />
                </div>
            </Template>
        </RadzenDataList>
    </div>
     <div class="grid grid-cols-2 gap-2 py-2">
         <button @onclick="e => OnSelect.InvokeAsync(_selectedItem)" class="btn shadow w-full">Confirmer</button>
         <label  for="modal-select-client" class="btn btn-outline shadow w-full">Annuler</label>
     </div>
</div>

@code {
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public DialogService DialogService { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;
    [Parameter] public EventCallback<Client> OnSelect { get; set; }
    [Parameter] public Client Client { get; set; } = null!;

    bool _isBusy = false;
    string _searchQuery = string.Empty;
    string _permissions = "";
    Client? _selectedItem;
    int _count;
    int _skip = 0;
    int _take = 6;

    IEnumerable<Client> _items = new List<Client>();

    protected override void OnParametersSet()
    {
        _selectedItem = Client;
        _permissions = CurrentItems.User.GetPermissionsFor(AppSections.Client);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await Policy.Handle<Exception>()
             .WaitAndRetryAsync(3, attempt => TimeSpan.FromMilliseconds(200 * attempt), (ex, attempt) => _isBusy = false)
             .ExecuteAsync(InitialLoad);
            StateHasChanged();
        }
    }
    async Task InitialLoad()
    {
        _skip = 0;
        _take = 10;
        await LoadData(new LoadDataArgs() { Skip = _skip, Top = _take });
        _selectedItem = _items.FirstOrDefault();
    }

    async Task OnSearch(string value)
    {
        _searchQuery = value;
        await InitialLoad();
    }

    async Task LoadData(LoadDataArgs args)
    {
        if (_isBusy)
            return;
        _isBusy = true;
        if (!string.IsNullOrEmpty(_searchQuery))
        {
            _items = await DbContext.Clients
                  .AsNoTracking()
                    .Where(x => x.CompanyId == CurrentItems.Company.Id)
                  .Where(x => x.Names.Contains(_searchQuery))
                  .OrderByDescending(x => x.CreatedAt)
                  .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await DbContext.Clients
               .AsNoTracking()
              .Where(x => x.CompanyId == CurrentItems.Company.Id)
             .Where(x => x.Names.Contains(_searchQuery))
             .CountAsync();
        }
        else
        {
            _items = await DbContext.Clients
                   .AsNoTracking()
                     .Where(x => x.CompanyId == CurrentItems.Company.Id)
                   .OrderByDescending(x => x.CreatedAt)
                  .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await DbContext.Clients
                  .Where(x => x.CompanyId == CurrentItems.Company.Id)
                .CountAsync();
        }
        _isBusy = false;
    }

    async Task AddItem()
    {
        var param = new Dictionary<string, object?>();
        var title = "Ajouter un client";
        var result = await DialogService.OpenAsync<ClientEdit>(title, param);
        if (result is bool canRefresh && canRefresh == true)
            await InitialLoad();
    }

    [Inject] TooltipService TooltipService { get; set; } = null!;
    void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null!)
      => TooltipService.Open(elementReference, message, options);
}
