@if (_isSmall)
{
    <div>
        @if (_currentStep == "Articles")
        {
            <ListArticle SaleItems=@_saleItems 
                OnItems=@(items => _saleItems = items)
                MoveToNext=@(e => _currentStep = "Cart")/>
        }
        else
        {
            <Cart Items=@_saleItems 
                MoveToBack=@(e => _currentStep = "Articles")
                OnItems=@(items => _saleItems = items) 
                Refresh="_ => Refresh.InvokeAsync()"
                Permissions=@Permissions Client=@_client />
        }
    </div>
}
else
{
    <div class="grid grid-cols-2">
        <ListArticle SaleItems=@_saleItems 
            OnItems=@(items => _saleItems = items)/>
        <Cart Items=@_saleItems OnItems=@(items => _saleItems = items) 
                Permissions=@Permissions Client=@_client
                Refresh="_ => Refresh.InvokeAsync()"/>
    </div>
}
<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>
@code {

    bool _isSmall = false;
    bool _isBusy = true;
    string _currentStep = "Articles";
    Client _client = null!;

    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [EditorRequired]
    [Parameter]
    public string Permissions { get; set; } = null!;

        [Parameter] public EventCallback Refresh { get; set; }

    List<SaleItem> _saleItems = new List<SaleItem>();

    protected async override Task OnInitializedAsync()
    {
        _client = await DbContext.Clients
        .FirstAsync(x => x.Email!.Contains("clientanonyme"));
    }


}
