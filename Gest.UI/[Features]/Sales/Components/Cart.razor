@using Gest.UI._Features_.Clients.Components
@using Gest.UI._Features_.Stock.Components
<div tabindex="0" class="bg-base-200 h-full px-2 py-1 space-y-1">
     <div class="flex items-center justify-between">
        <p>Panier</p>
        <button @onclick=@ClearCart class="btn btn-xs normal-case btn-outline btn-error">Vider</button>
    </div>
    <div class="bg-base-100 h-[1px] w-full"></div>
     <div tabindex="0" class="collapse collapse-plus border border-base-300 bg-base-100  rounded-md">
         <input type="checkbox" /> 
        <div class="collapse-title text-md font-medium">
        Client
        </div>
        <div class="collapse-content bg-base-200 -my-2"> 
            <div class="-mx-3 -my-4">
               <label id="btn-select-client" for="modal-select-client" class="-mx-5">
                    <ClientCard Model=@Client IsSelected/>
                </label>
                <ListClientModal Client=@Client OnClientSelected=@(e => SetClient(e))/>
            </div>
        </div>
    </div>
    <div>
        <p>Article(s) séléctionné(s)</p>
        <div class="space-y-1  min-h-[15rem]">
            @foreach (var item in _items)
            {
                            <CartItem Remove=@RemoveFromCart Change=@OnItemChanged Item=@item/>
            }
        </div>
    </div>
              
    <div class="px-2">
        <div class="flex justify-between px-2 py-2 @(_items.Count > 0 ? "" : "hidden")">
            <p class="font-medium">Total</p>
            <p class="font-semibold">@_total $</p>
         </div>
         <div class="grid grid-cols-2 gap-2">
            @if (_items.Count > 0)
            {
                        <div class="dropdown dropdown-top">
                            <label tabindex="0" class="btn shadow w-full">Confirmer</label>
                            <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                <li><label for="@($"modal-pay-{Client?.Id}")">Dette</label></li>
                                <li><button class=@(_isBusy ? "" : "loading") @onclick=@(e => Pay(false))>A retirer</button></li>
                                <li><button class=@(_isBusy ? "" : "loading") @onclick=@(e => Pay(true))>Payer</button></li>
                            </ul>
                        </div>
                    <CartPayModal  Client=@Client Items=@_items 
            Permissions=@Permissions Refresh=@Close />
            }
            else
            {
                            <button @onclick=@(e => MoveToBack.InvokeAsync())  class="btn shadow w-full md:hidden">Retour aux articles</button>
            }
            <label id="btn-close-modal-new-sale" for="modal-new-sale" class="btn btn-outline shadow w-full md:hidden">Fermer</label>
         </div>
    </div>

</div>

<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>

@code {
    bool _isSmall = false;
    bool _isBusy = false;

    [Inject] public IJSRuntime JSRuntime { get; set; } = null!;
    [Parameter] public EventCallback Refresh { get; set; }
    [Parameter] public EventCallback<List<SaleItem>> OnItems { get; set; }
    [Parameter] public EventCallback<bool> MoveToBack { get; set; }
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Client Client { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public string Permissions { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public List<SaleItem> Items { get; set; } = null!;

    List<SaleItem> _items = new List<SaleItem>();
    decimal _total = 0;


    protected override void OnParametersSet()
    {
        _items = Items;
        _total = _items.Sum(x => x.SubTotal);
    }

    void ClearCart()
    {
        _items.Clear();
        OnItems.InvokeAsync(_items);
        _total = _items.Sum(x => x.SubTotal);
        MoveToBack.InvokeAsync();
    }

    void RemoveFromCart(SaleItem item)
    {
        var itemToRemove = _items.First(x => x.ArticleId == item.ArticleId);
        _items.Remove(itemToRemove);
        OnItems.InvokeAsync(_items);
        _total = _items.Sum(x => x.SubTotal);
    }

    void OnItemChanged(SaleItem item)
    {
        try
        {
            if (_items.Count > 0)
            {
                var itemToRemove = _items.First(x => x.ArticleId == item.ArticleId);
                var index = _items.IndexOf(itemToRemove);
                _items[index] = item;
                OnItems.InvokeAsync(_items);
                _total = _items.Sum(x => x.SubTotal);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task Close()
    {
        ClearCart();
        await Refresh.InvokeAsync();
        await JSRuntime.InvokeVoidAsync("click", "btn-close-modal-new-sale");
    }

    async Task Pay(bool isDelivered)
    {
        _isBusy = true;
        var result = await DbContext.SaveSale(_items, Client, CurrentItems.Company,
            CurrentItems.User, CurrentItems.Branch, CurrentItems.DateOfOperations,
            _total, _total, 0, TypeOfAccount.Cash, !isDelivered);
        if (result > 0)
            await Close();
        _isBusy = false;
    }

    async Task SetClient(Client client)
    {
        Client = client;
        await JSRuntime.InvokeVoidAsync("click", "btn-select-client");
    }
}
