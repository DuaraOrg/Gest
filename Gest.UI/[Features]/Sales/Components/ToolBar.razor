<div class="shadow flex items-center text-sm text-base-content overflow-x-scroll space-x-3 px-2  py-2  no-scrollbar fixed w-full  bg-base-100 border-t-[0.2px] border-base-200 z-10 ">
    <div>
         <h2 >Rechercher</h2>
         <input type="text" 
             @oninput=@(args => OnSearchQuery.InvokeAsync(args.Value?.ToString()))
             placeholder="No de vente" 
             class="input input-bordered w-full min-w-[7rem] max-w-xs" />
    </div>
     <div >
       <h2>Paiement</h2>
          <select value="@_selectedPaymentState" @onchange=@(args => 
              PaymentStateChanged.InvokeAsync(args.Value!.ToString())) 
              class="select min-w-[7.5rem] select-bordered w-full">
            @foreach (var item in PaymentStatus.AllWithTous())
            {
                        <option value="@item" selected=@(item == PaymentStatus.Tous)>@item</option>
            }
            </select>
    </div>
      <div>
       <h2>Livraison</h2>
       <select value="@_selectedDeliveryState" @onchange=@(args => 
              DeliveryStateChanged.InvokeAsync(args.Value!.ToString())) 
              class="select min-w-[7.5rem] select-bordered w-full">
            @foreach (var item in DeliveryStatus.AllWithTous())
            {
                        <option value="@item" selected=@(item == PaymentStatus.Tous)>@item</option>
            }
            </select>
    </div>
    <div>
       <h2 >Période</h2>
       <select value="@_selectedPeriod" @onchange=@(args => OnPeriodChange(args.Value!.ToString())) 
              class="select min-w-[7.5rem] select-bordered w-full">
            @foreach (var item in Period.AllWithTous())
            {
                        <option value="@item" selected=@(item == PaymentStatus.Tous)>@item</option>
            }
            </select>
    </div>
    <div class="flex items-center space-x-4">
        @if (_selectedPeriod == Period.Date || _selectedPeriod == Period.IntervalDate)
        {
           <div>
            <h2 >@(_selectedPeriod == Period.Date ? "Date" : "Date de début")</h2>
            <RadzenDatePicker class="w-[7rem]" @bind-Value=@_startDate Change=@OnDateChanged DateFormat="d"/>
           </div>
        }
        @if (_selectedPeriod == Period.IntervalDate)
        {
          <h2>-</h2>
          <div>
           <h2>Date de fin</h2>
           <RadzenDatePicker class="w-[7rem]" @bind-Value=@_endDate Change=@OnDateChanged DateFormat="d"/>
        </div>
        }
    </div>
     <div class="pt-4 flex space-x-2">
        @if (Permissions.Contains(AppPermissions.Create) || Permissions.Contains(AppPermissions.Update))
        {
                 <div class="tooltip" data-tip="Ajouter une vente">
                         <label for="modal-new-sale"  class="btn btn-square text-base-content shadow-md">
                           <svg class="h-6 fill-current"  viewBox="0 0 50 50">
                                <path d="M24 9L24 24L9 24L9 26L24 26L24 41L26 41L26 26L41 26L41 24L26 24L26 9Z" />
                            </svg>
                        </label>
                   </div>
        }
         <button  class="btn btn-outline btn-square text-base-content shadow-md" @onclick=@(_ => OnRefresh.InvokeAsync())>
                       <svg class="h-6 fill-current"  viewBox="0 0 30 30">
                            <path d="M15 3C12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312C10.25407 5.9000929 12.516602 5 15 5C20.19656 5 24.450989 8.9379267 24.951172 14L22 14L26 20L30 14L26.949219 14C26.437925 7.8516588 21.277839 3 15 3 z M 4 10L0 16L3.0507812 16C3.562075 22.148341 8.7221607 27 15 27C17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469C19.74593 24.099907 17.483398 25 15 25C9.80344 25 5.5490109 21.062074 5.0488281 16L8 16L4 10 z" />
                        </svg>
         </button>
    </div>

</div>

@code {
    [Parameter]
    public EventCallback<string> OnSearchQuery { get; set; }

    [Parameter]
    public EventCallback OnRefresh { get; set; }

    [Parameter]
    public EventCallback NewItem { get; set; }

    [Parameter]
    public EventCallback<string> DeliveryStateChanged { get; set; }

    [Parameter]
    public EventCallback<string> PaymentStateChanged { get; set; }

    [Parameter]
    public EventCallback<string> PeriodChanged { get; set; }

    [Parameter]
    public EventCallback<(DateTime startDate, DateTime endDate)> DateChanged { get; set; }

    [EditorRequired]
    [Parameter]
    public string Permissions { get; set; } = null!;

    string? _searchQuery;
    string _selectedPeriod = Period.Tous;
    string _selectedDeliveryState = DeliveryStatus.Tous;
    string _selectedPaymentState = PaymentStatus.Tous;

    DateTime _startDate = DateTime.UtcNow.ToLocalTime();
    DateTime _endDate = DateTime.UtcNow.ToLocalTime();

    void OnPeriodChange(string period)
    {
        _selectedPeriod = period;
        PeriodChanged.InvokeAsync(_selectedPeriod);
    }
    void OnDateChanged()
    {
        DateChanged.InvokeAsync((_startDate, _endDate));
    }

    [Inject] TooltipService TooltipService { get; set; } = null!;
    void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null!)
      => TooltipService.Open(elementReference, message, options);
}
