@using Gest.UI._Features_.Clients.Components
<div tabindex="0" class="space-y-2 bg-base-200 p-2 @(_isSmall ? "" : "px-2 pb-16") overflow-y-auto">
    <div tabindex="0" class="collapse collapse-plus border border-base-300 bg-base-100  rounded-md">
         <input type="checkbox" /> 
        <div class="collapse-title text-md font-medium">
        Client
        </div>
        <div class="collapse-content bg-base-200 -my-2"> 
            <div class="pt-2 -mx-3">
               <ClientCard Model=@Model.Client IsSelected/>
            </div>
        </div>
    </div>
    <div tabindex="0" class="collapse collapse-plus border border-base-300 bg-base-100  rounded-md">
         <input type="checkbox" /> 
        <div class="collapse-title text-md font-medium">
        Panier
        </div>
        <div class="collapse-content bg-base-200 -my-2"> 
            <div class="pt-2 space-y-1 -mx-3">
                @foreach (var item in Model.Items.Where(x => x.Article is not null))
                {
                    <SaleItemView Sale=@Model Item=@item Refresh="() => Refresh.InvokeAsync()"/>
                }
            </div>
        </div>
    </div>
    <div class="bg-base-100 text-base-content shadow px-2 my-4">
       <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light ">Etat de livraison</h2>
            <h2 class="font-medium">@Model.DeliverStatus</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light ">Etat de paiement</h2>
            <h2 class="font-medium">@Model.PayStatus</h2>
        </div>
       <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light">Total à payer</h2>
            <h2 class="font-medium">@Model.TotalAmount.ToString("#.##")$</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light">Total payé</h2>
            <h2 class="font-medium">@Model.AmountPaid.ToString("#.##")$</h2>
        </div>
        @if ((Model.TotalAmount - Model.AmountPaid) > 0)
        {
                        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
                            <h2 class="font-light">Reste</h2>
                            <h2 class="font-medium">@((Model.TotalAmount - Model.AmountPaid).ToString("#.##"))$</h2>
                        </div>
        }
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light">Par</h2>
            <h2 >@Model.Seller?.FullName</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-primary-content">
            <h2 class="font-light">Date</h2>
            <h2 >@Model.CreatedAt.ToLocalTime()</h2>
        </div>
    </div>
    @if (_isBusy)
    {
         <RadzenProgressBar  class="w-full h-1"  Value="100" ShowValue=@false Mode=@ProgressBarMode.Indeterminate/>
    }
    <div class="grid @(_isSmall ? (Model.TotalAmount - Model.AmountPaid) >= 0 ? "grid-cols-4" : "grid-cols-3" : "grid-cols-3") gap-2 px-2 md:py-2 ">
        <button class="btn shadow">Facture</button>
        @if ((Model.TotalAmount - Model.AmountPaid) > 0 
        && Permissions.Contains(AppPermissions.Update))
        {
              <label for="@($"modal-pay-{Model.Id}")"  class="btn shadow">Payer</label>
              <CartPayModal  
                  Client=@Model.Client Items=@Model.Items.ToList() 
                  Sale=@Model Permissions=@Permissions Refresh="e => OnCartPayRefresh(e)"/>
        }
        @if (Model.DeliverStatus != DeliveryStatus.Delivered 
        && Permissions.Contains(AppPermissions.Update))
        {
             <button @onclick=@DeliverAll class="btn  shadow">Livrer</button>
        }
        @if (_isSmall)
        {
            <label for="@($"modal-{Model.Id}")" class="btn btn-outline shadow">Fermer</label>
        }
   </div>
</div>
<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>
@code {

    [Inject] 
    public GestDbContext DbContext { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Sale Model { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public string Permissions { get; set; } = null!;

    [Parameter] public EventCallback Refresh { get; set; }

    bool _isSmall = false;
    bool _isBusy = false;

    async Task DeliverAll()
    {
        _isBusy = true;
        var items = new List<SaleItem>();
        foreach (var item in Model.Items)
        {
            var stockMovement = new StockMouvement()
                {
                    ArticleId = item.Article!.Id,
                    Date = DateTime.UtcNow,
                    PrevStock = item.Article.Stock.Qty,
                    NewStock = item.Article.Stock.Qty - item.QtyInUnitOfMeasure,
                    Qty = item.QtyInUnitOfMeasure,
                    State = StockState.Out,
                    PrevSellingPrice = item.Article.Price.SellingPricePerUnitOfMeasure,
                    NewSellingPrice = item.Article.Price.SellingPricePerUnitOfMeasure,
                    NewBuyingPrice = item.Article.Price.BuyingPricePerUnitOfMeasure,
                    PrevBuyingPrice = item.Article.Price.BuyingPricePerUnitOfMeasure
                };
            var article = DbContext.Articles.First(x => x.Id == item.ArticleId);
            article.Stock.Qty = stockMovement.NewStock;
            await DbContext.StockMouvements.AddAsync(stockMovement);
            var saleItem = Model.Items.Single(x => x.ArticleId == item.ArticleId);
            saleItem.QtyDelivered = item.QtyInUnitOfMeasure;
            saleItem.Article = null;
            items.Add(saleItem);
            DbContext.Update(article);
        }
        var sale = DbContext.Sales.Single(x => x.Id == Model.Id);
        sale.Items = items;
        sale.DeliverStatus = Model.Items.Any(x => x.QtyDelivered != x.QtyInUnitOfMeasure)
                            ? DeliveryStatus.InDelivery : DeliveryStatus.Delivered;
        DbContext.Update(sale);
        await DbContext.SaveChangesAsync();
        _isBusy = false;
        Model = DbContext.Sales.Include(x => x.Items).ThenInclude(x => x.Article).Single(x => x.Id == Model.Id);
        await Refresh.InvokeAsync();
    }

    async Task OnCartPayRefresh(decimal paidAmount)
    {
        Model.AmountPaid += paidAmount;
        Model.AmountPaid = Model.AmountPaid > Model.TotalAmount ? Model.TotalAmount : Model.AmountPaid;
        await Refresh.InvokeAsync();
    }
}
