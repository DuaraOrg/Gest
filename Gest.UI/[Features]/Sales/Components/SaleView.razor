@using Gest.UI._Features_.Clients.Components
<div class="space-y-2 bg-gray-100 @(_isSmall ? "" : "px-2 pb-4")">
    <div class="px-2 space-y-1">
        <p class="-ml-4 text-sm">Client</p>
         <ClientCard Model=@Model.Client IsSelected/>
    </div>
    <div class="space-y-1">
        <p class="-ml-2 text-sm">Panier</p>
        @foreach(var item in Model.Items)
        {
            <SaleItemView Item=@item/>
        }
    </div>
    <div class="bg-gray-50 shadow px-2 my-4">
       <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Etat de livraison</h2>
            <h2 class="text-gray-800 font-medium">@Model.DeliverStatus</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Etat de paiement</h2>
            <h2 class="text-gray-800 font-medium">@Model.PayStatus</h2>
        </div>
       <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Total à payer</h2>
            <h2 class="text-gray-800 font-medium">@Model.TotalAmount.ToString("#.##")$</h2>
        </div>
        <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
            <h2 class="font-light text-gray-600">Total payé</h2>
            <h2 class="text-gray-800 font-medium">@Model.AmountPaid.ToString("#.##")$</h2>
        </div>
        @if ((Model.TotalAmount - Model.AmountPaid) > 0)
        {
            <div class="flex justify-between px-2 py-1.5 border-b-[0.5px] border-gray-400">
                <h2 class="font-light text-gray-600">Reste</h2>
                <h2 class="text-gray-800 font-medium">@((Model.TotalAmount - Model.AmountPaid).ToString("#.##"))$</h2>
            </div>
        }
    </div>
    <div class="grid @(_isSmall ? (Model.TotalAmount - Model.AmountPaid) >= 0 ? "grid-cols-4" : "grid-cols-3" : "grid-cols-3") gap-2 pt-4">
        @if((Model.TotalAmount - Model.AmountPaid) > 0)
        {
            <button @onclick=@(_ => OpenPayment())  class="bg-gray-600 hover:bg-gray-500 px-4 py-2 text-gray-50 rounded shadow w-full">Payer</button>
        }
        <button  class="bg-gray-600 hover:bg-gray-500 px-4 py-2 text-gray-50 rounded shadow w-full">Facture</button>
        <button  class="bg-gray-600 hover:bg-gray-500 px-4 py-2 text-gray-50 rounded shadow w-full">Livrer</button>
        @if (_isSmall)
        {
            <button @onclick=@(_ => Cancel()) class="bg-gray-100 hover:bg-gray-200 px-4 py-2 text-gray-600 rounded shadow w-full">Annuler</button>
        }
   </div>
</div>
<RadzenMediaQuery Query="(max-width: 768px)" Change=@(e => _isSmall = e)/>
@code {

    [Inject] public DialogService DialogService { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Sale Model { get; set; } = null!;


    [Inject] IJSRuntime JSRuntime { get; set; } = null!;

    bool _isSmall = false;
    bool _isBusy = false;

    void Cancel(bool canRefresh = false) => DialogService.Close(canRefresh);

    async Task OpenPayment()
    {
        var param = new Dictionary<string, object?>() { { "Sale", Model}, {"Client",Model.Client} };
        var title = $"Paiement vente #{Model.SaleId}";
        var result = await DialogService.OpenAsync<CartPay>(title, param);
        if(result is bool canRefresh)
            Cancel(canRefresh);
    }
}
