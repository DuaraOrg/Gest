@using Gest.UI._Features_.Stock.Components
<div class="bg-base-200 h-full px-2 py-1 space-y-1">
  <div class="flex space-x-2  w-full py-2">
      <input type="text" 
             @oninput=@(args => OnSearch(args.Value?.ToString() ?? string.Empty))
             placeholder="Rechercher un article par nom" 
             class="input input-bordered w-full min-w-[7rem]" />
       <div class="flex space-x-1">
            @if (_permissions.Contains(AppPermissions.Create))
            {
                                     <div class="tooltip" data-tip="Ajouter un article">
                                             <label for="modal-new-article"  class="btn btn-square text-base-content shadow-md">
                                               <svg class="h-6 fill-current"  viewBox="0 0 50 50">
                                                    <path d="M24 9L24 24L9 24L9 26L24 26L24 41L26 41L26 26L41 26L41 24L26 24L26 9Z" />
                                                </svg>
                                            </label>
                                       </div>
            }
         <button  class="btn btn-outline btn-square text-base-content shadow-md" @onclick=@InitialLoad>
             <svg class="h-6 fill-current"  viewBox="0 0 30 30">
                 <path d="M15 3C12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312C10.25407 5.9000929 12.516602 5 15 5C20.19656 5 24.450989 8.9379267 24.951172 14L22 14L26 20L30 14L26.949219 14C26.437925 7.8516588 21.277839 3 15 3 z M 4 10L0 16L3.0507812 16C3.562075 22.148341 8.7221607 27 15 27C17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469C19.74593 24.099907 17.483398 25 15 25C9.80344 25 5.5490109 21.062074 5.0488281 16L8 16L4 10 z" />
             </svg>
         </button>
       </div>
    </div>
    <div class="bg-base-100 h-[1px] w-full"></div>
    @if (IsBusy)
    {
        <progress class="progress w-full"></progress>
    }
     <RadzenDataList class="-mx-2 -space-y-5 min-h-[15rem]" Count=@_count Data=@_items TItem=@Article LoadData=@LoadData AllowPaging=true>
            <Template Context="item">
                <div>
                     <ArticleCard Model=@item IsSelected=@(_saleItems.Any(x => x.ArticleId == item.Id))  Click=@(_ => OnSelection(item)) BtnActionClick=@(_ => OnSelection(item)) BtnActionText="Ajouter"/>
                </div>
            </Template>
        </RadzenDataList>
    <div class="grid grid-cols-5 gap-1 w-full  px-2 md:hidden">
      <button @onclick=@(e => MoveNext()) class="col-span-4 btn py-2 flex items-center justify-between w-full">
        <p class="ml-12">@(_saleItems.Select(x => x.QtyInUnitOfMeasure).Sum()) articles = @(_saleItems.Sum(x => ((decimal)x.QtyInUnitOfMeasure) * x.Article!.Price.SellingPricePerUnitOfMeasure))$</p>
        <svg class="h-5 fill-current "  viewBox="0 0 50 50">
            <path d="M19.71875 8.28125L18.28125 9.71875L33.5625 25L18.28125 40.28125L19.71875 41.71875L35.71875 25.71875L36.40625 25L35.71875 24.28125Z" />
        </svg>
    </button>
    <label id="btn-close-modal-new-sale" for="modal-new-sale" class="btn btn-outline shadow w-full md:hidden">
          <svg class="h-4 fill-current" viewBox="0 0 50 50">
                <path d="M7.71875 6.28125L6.28125 7.71875L23.5625 25L6.28125 42.28125L7.71875 43.71875L25 26.4375L42.28125 43.71875L43.71875 42.28125L26.4375 25L43.71875 7.71875L42.28125 6.28125L25 23.5625Z" />
            </svg>
    </label>
    </div>
</div>

@code {
    [Inject] public GestDbContext DbContext { get; set; } = null!;
    [Inject] public CurrentItems CurrentItems { get; set; } = null!;
    [Parameter] public EventCallback<bool> MoveToNext { get; set; }
    [Parameter] public EventCallback<Article> OnSelect { get; set; }
    [Parameter] public EventCallback<List<SaleItem>> OnItems { get; set; }
    [Parameter] public List<SaleItem> SaleItems { get; set; } = new List<SaleItem>();
    [Parameter] public bool IsBusy { get; set; } = false;


    string _searchQuery = string.Empty;
    string _permissions = "";
    int _count;
    int _skip = 0;
    int _take = 6;

    IEnumerable<Article> _items = new List<Article>();
    List<SaleItem> _saleItems = new List<SaleItem>();


    protected override void OnParametersSet()
    {
        _permissions = CurrentItems.User.GetPermissionsFor(AppSections.Stock);
        _saleItems = SaleItems;
    }

    void ModifyCart(Article article, bool canAdd = true)
    {
        var isInCart = _saleItems.SingleOrDefault(x => x.ArticleId == article.Id);
        if (isInCart is null)
        {
            if (canAdd)
            {
                var saleItem = new SaleItem()
                    {
                        Article = article,
                        ArticleId = article.Id,
                        BuyingUnitPricePerUnitOfMeasure = article.Price.BuyingPricePerUnitOfMeasure,
                        QtyInUnitOfMeasure = 1,
                        UnitPricePerUnitOfMeasure = article.Price.SellingPricePerUnitOfMeasure,
                    };
                _saleItems.Add(saleItem);
            }
        }
        else
        {
            if (canAdd)
            {
                var index = _saleItems.IndexOf(isInCart);
                _saleItems.Remove(isInCart);
                isInCart.QtyInUnitOfMeasure += 1;
                _saleItems.Insert(index, isInCart);
            }
            else
            {
                _saleItems.Remove(isInCart);
            }
        }
        OnItems.InvokeAsync(_saleItems);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await InitialLoad();
            StateHasChanged();
        }
    }

    async Task OnSearch(string value)
    {
        _searchQuery = value;
        await InitialLoad();
    }

    async Task InitialLoad()
    {
        _skip = 0;
        _take = 10;
        await Policy.Handle<Exception>()
     .WaitAndRetryAsync(5, attempt => TimeSpan.FromMilliseconds(1000 * attempt), (ex, attemp) => IsBusy = false)
         .ExecuteAsync(() => LoadData(new LoadDataArgs() { Skip = _skip, Top = _take }));
    }

    async Task LoadData(LoadDataArgs args)
    {
        if (IsBusy)
            return;
        IsBusy = true;
        if (!string.IsNullOrEmpty(_searchQuery))
        {
            _items = await DbContext.Articles
                  .AsNoTracking()
                  .Where(x => x.CompanyId == CurrentItems.Company.Id)
                  .Where(x => x.Name.Contains(_searchQuery))
                  .OrderByDescending(x => x.CreatedAt)
                  .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await DbContext.Articles
               .AsNoTracking()
                 .Where(x => x.CompanyId == CurrentItems.Company.Id)
             .Where(x => x.Name.Contains(_searchQuery))
             .CountAsync();
        }
        else
        {
            _items = await DbContext.Articles
                   .AsNoTracking()
                   .Where(x => x.CompanyId == CurrentItems.Company.Id)
                   .OrderByDescending(x => x.CreatedAt)
                  .Paginate(args.Skip, args.Top).ToListAsync();
            _count = await DbContext.Articles
                  .Where(x => x.CompanyId == CurrentItems.Company.Id)
                .CountAsync();
        }
        IsBusy = false;

    }

    async Task OnSelection(Article? item)
    {
        if (item is not null)
        {
            await OnSelect.InvokeAsync(item);
            ModifyCart(item, true);
        }
    }

    void MoveNext()
    {
        if (_saleItems.Count > 0)
        {
            MoveToNext.InvokeAsync();
        }
    }
}
