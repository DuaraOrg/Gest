@using System.ComponentModel.DataAnnotations 
@using Microsoft.EntityFrameworkCore;
<div data-theme="@_selectedTheme" class="card bg-base-100 shadow-xl mx-4">
  <div class="card-body">
    <h2 class="card-title">Bienvenu</h2>
    <p>Veuillez vous identier pour vous connecter</p>
     <EditForm class="space-y-3 my-2" Model=@_model OnValidSubmit=@OnValidSubmit >
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <h2 class="text-red-500 text-sm">@_errors</h2>
            <div class="space-y-3 flex flex-col py-3">
                <input type="text" autocomplete="username" @bind=@_model.Email placeholder="Email" class="input input-bordered w-full max-w-xs" />
                <input type="password"  autocomplete="current-password" aria-required="true" @bind=@_model.Password placeholder="Mot de passe" class="input input-bordered w-full max-w-xs" />  
            </div>
            <button type="submit" @onclick=@(e => _isBusy = true) class="btn w-full shadow @(_isBusy ? "loading" : "")" disabled="@_isBusy">Se connecter</button>
      </EditForm>
  </div>
</div>
<div data-theme="@_selectedTheme" class="py-5 -mt-3 mx-4 flex items-center justify-center">
     <button @onclick=ChangeTheme class="btn my-2 mt-4">Changer de Thème</button>
</div>

@code {

    LoginInput _model = new LoginInput();
    bool _isBusy = false;
    string _errors = string.Empty;
    [Inject] GestDbContext DbContext { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] CurrentItems CurrentItems { get; set; } = null!;
    Queue<string> _themes = new();
    string _selectedTheme = "dark";

    protected override void OnInitialized()
    {
        _themes.Enqueue("forest");
        _themes.Enqueue("emerald");
        _themes.Enqueue("garden");
        _themes.Enqueue("dark");
    }

    async Task OnSubmit()
    {
         _isBusy = true;
    }

    async Task OnValidSubmit()
    {
        try
        {
            _isBusy = true;
            var user = await DbContext.Users
                .Include(x => x.Companies)
                .ThenInclude(x => x.Company)
                .SingleOrDefaultAsync(x => x.Email == _model.Email);
            if (user is not null)
            {
                var isValidPassword = _model.Password.VerifyPassword(user.PasswordHash, user.PasswordSalt);
                if (isValidPassword)
                {
                    CurrentItems.Company = user.Companies.First().Company!;
                    CurrentItems.Branch = DbContext.Branches.First(x => x.CompanyId == CurrentItems.Company.Id);
                    CurrentItems.User = user;

                    NavigationManager.NavigateTo(UrlKeys.Sales);
                    return;
                }
            }
            _errors = "Email ou mot de passe incorrect";
            _isBusy = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }


    void ChangeTheme()
    {
        _selectedTheme = _themes.Dequeue();
        _themes.Enqueue(_selectedTheme);
        CurrentItems.Theme = _selectedTheme;
    }

    class LoginInput
    {
        [Required(ErrorMessage = "Veuillez spécifier un mail")]
        public string Email { get; set; } = "admin@swala.com";
        [Required(ErrorMessage = "Veuillez spécifier un mot de passe")]
        public string Password { get; set; } = "Admin@243";
    }
}
