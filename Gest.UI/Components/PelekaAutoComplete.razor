<div class="relative inline-block text-left hover:bg-celery-100 @Class">
    <div>
        <button @onclick=@(_ => _isExpanded = !_isExpanded) type="button" class="inline-flex justify-center items-center w-full rounded border border-gray-300 shadow-sm px-4 py-1.5 bg-white text-sm font-medium text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-celery-500" aria-haspopup="true">
            <input disabled="@Disabled" class="bg-transparent text-sm p-0 -px-2 border-0 ring-0 focus:ring-0 focus:border-0 focus:outline-none w-full @(Disabled ? "cursor-not-allowed" : "")" type="text" @bind-value=@Value @oninput=@(e => OnInputChanged.InvokeAsync(e.Value!.ToString())) placeholder="@Placeholder"/>
            @if (ShowArrow)
            {
                <svg class="-mr-1 ml-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            }
        </button>
    </div>
    @if (_isExpanded)
    {
        <div class="origin-top-right absolute right-0 mt-2 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none w-full" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
            <div class="py-1 w-full" role="none">
                @foreach (var value in Values)
                {
                    <a @onclick:preventDefault="true" @onclick:stopPropagation="true"
                    @onclick=@(_ => OnChange(value)) class="text-gray-700 block px-4 py-2 text-sm hover:cursor-pointer hover:bg-celery-100" role="menuitem" tabindex="-1" id="menu-item-0">@(value.Length > 50 ? $"{value.Substring(0,48)}.." : value)</a>
                }
            </div>
        </div>
    }
</div>
@code {
    bool _isExpanded = false;
    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<string> Values { get; set; } = new List<string>();

    [Parameter]
    public string Placeholder { get; set; } = "Sélectionner";

    [Parameter]
    public bool ShowArrow { get; set; } = true;

    [Parameter]
    public bool Disabled { get; set; } = false;


    [Parameter]
    public EventCallback<string> OnValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnInputChanged { get; set; }

    void OnChange(string value)
    {
        _isExpanded = false;
        OnValueChanged.InvokeAsync(value);
    }
}