// <auto-generated />
using System;
using Gest.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gest.Core.Data.Migrations
{
    [DbContext(typeof(GestDbContext))]
    partial class GestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Gest.Core.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FCToDollarRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("453412a3-578b-446b-9406-bd7077bdce01"),
                            CompanyId = new Guid("afdc3370-adb1-4de9-ad12-7678145b4485"),
                            CreatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6718),
                            FCToDollarRate = 2000m,
                            Name = "Default",
                            UpdatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6712)
                        });
                });

            modelBuilder.Entity("Gest.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FCToDollarRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afdc3370-adb1-4de9-ad12-7678145b4485"),
                            Adress = "Bunia",
                            CreatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6710),
                            FCToDollarRate = 2000m,
                            Name = "Ets TUUNGANE",
                            UpdatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6706)
                        });
                });

            modelBuilder.Entity("Gest.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5ccad5b-6cbc-4993-96e3-e8cd7c76d8b9"),
                            CreatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6681),
                            Email = "admin@swala.com",
                            FirstName = "Admin",
                            LastName = "Swala",
                            PasswordHash = "gVO+geip618dEdoz47JEKqVlgOQs9hCH4SB1v+jP1bQDgoKjUAVC0QVz3BcFNCylkR7V2TDQyu+dB5GyVACconzpm3j4xS+F8mPUQcTeQvgI3+SgrqDSX1jx7tw3JZDt6XfZFBbwIOdZACBeUKyMfODRKgvuJ5icPwJJhd5wlEMnjH7IUiBFBeSfWiUVSz+NQlf1lvrPa4la/+Hgm1qXCl5tpzi1/gDH5OOh4E/PLp7XQardleOLM31vHF2ngv8OP0wWrsXHGbORYSFdxIVcLqQBha7j76kRIqVpR30r71oDV69lpoSU5lFEOuKhf9VRS0ErHC3xattaIqwMYxUKBw==",
                            PasswordSalt = "/5Zo2sYD6LHii+LRoxUJ2NJFHDP8N4x5Vz3JiWbMgvYM0Io88zdDPCM7byNlb6rKr2t6qEYlvlT/RQ0HG5dUmQ==",
                            UpdatedAt = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6630)
                        });
                });

            modelBuilder.Entity("Gest.Core.Entities.UserCompany", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserCompanies");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d5ccad5b-6cbc-4993-96e3-e8cd7c76d8b9"),
                            CompanyId = new Guid("afdc3370-adb1-4de9-ad12-7678145b4485"),
                            Joined = new DateTime(2022, 3, 2, 11, 23, 23, 14, DateTimeKind.Utc).AddTicks(6692),
                            Role = "Propriétaire",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gest.Core.Entities.Branch", b =>
                {
                    b.HasOne("Gest.Core.Entities.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Gest.Core.Entities.UserCompany", b =>
                {
                    b.HasOne("Gest.Core.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gest.Core.Entities.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gest.Core.Entities.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gest.Core.Entities.User", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
